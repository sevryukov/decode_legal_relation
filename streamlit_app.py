import streamlit as st
import json
import re
import pandas as pd
import io
from datetime import datetime

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìÑ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π")
st.write("–í—Å—Ç–∞–≤—å—Ç–µ JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

# –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ JSON
input_json = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ JSON –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", 
    height=300,
    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–¥–µ—Å—å..."
)

if input_json:
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        result = json.loads(input_json)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_rights_data = []
        all_duties_data = []
        all_goals = []
        all_objects = []
        all_subjects = []

        for relation in result:
            with st.expander(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è: {relation.get('–∏—Å—Ç–æ—á–Ω–∏–∫', '–ù–µ —É–∫–∞–∑–∞–Ω')}"):
                st.markdown(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {relation.get('–∏—Å—Ç–æ—á–Ω–∏–∫', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.markdown(f"**–§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞:** _{relation.get('—Ñ—Ä–∞–≥–º–µ–Ω—Ç_—Ç–µ–∫—Å—Ç–∞', '–ù–µ —É–∫–∞–∑–∞–Ω')}_")
                
                # –ë–ª–æ–∫ "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏"
                st.subheader("–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏-—Ü–µ–ª–∏")
                for goal in relation.get('–ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', {}).get('–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏_—Ü–µ–ª–∏', []):
                    st.markdown(f"- {goal}")
                    all_goals.append(goal)
                
                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –û–±—ä–µ–∫—Ç—ã –∏ –°—É–±—ä–µ–∫—Ç—ã
                cols = st.columns(2)
                
                with cols[0]:
                    st.subheader("–ü—Ä–µ–¥–º–µ—Ç—ã")
                    for obj in relation.get('–ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', {}).get('–æ–±—ä–µ–∫—Ç—ã', []):
                        st.markdown(f"- {obj}")
                        all_objects.append(obj)
                
                with cols[1]:
                    st.subheader("–°—É–±—ä–µ–∫—Ç—ã")
                    for subj in relation.get('–ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', {}).get('—Å—É–±—ä–µ–∫—Ç—ã', []):
                        st.markdown(f"""
                        - **{subj.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}** ({subj.get('—Ç–∏–ø', '–ù–µ —É–∫–∞–∑–∞–Ω')})
                        """)
                        all_subjects.append(f"{subj.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ({subj.get('—Ç–∏–ø', '–ù–µ —É–∫–∞–∑–∞–Ω')})")
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–≤
                st.subheader("–ü—Ä–∞–≤–∞")
                rights_data = []
                for right in relation.get('–ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', {}).get('–ø—Ä–∞–≤–∞', []):
                    for obligation in right.get('–≤—Å—Ç—Ä–µ—á–Ω—ã–µ_–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', []):
                        rights_data.append({
                            "–ò—Å—Ç–æ—á–Ω–∏–∫": relation.get('–∏—Å—Ç–æ—á–Ω–∏–∫', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                            "–°—É–±—ä–µ–∫—Ç –ø—Ä–∞–≤–∞": right.get('—Å—É–±—ä–µ–∫—Ç_–ø—Ä–∞–≤–∞', {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                            "–ü—Ä–∞–≤–æ": right.get('–æ–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–∞–≤–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            "–í—Å—Ç—Ä–µ—á–Ω–∞—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å": obligation.get('–æ–ø–∏—Å–∞–Ω–∏–µ_–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                            "–°—É–±—ä–µ–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤": obligation.get('—Å—É–±—ä–µ–∫—Ç_–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        })
                rights_df = pd.DataFrame(rights_data)
                st.dataframe(rights_df, use_container_width=True)
                all_rights_data.extend(rights_data)
                
                # –¢–∞–±–ª–∏—Ü–∞ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π
                st.subheader("–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏")
                duties_data = []
                for duty in relation.get('–ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', {}).get('–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', []):
                    for right in duty.get('–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º—ã–µ_–ø—Ä–∞–≤–∞', []):
                        duties_data.append({
                            "–ò—Å—Ç–æ—á–Ω–∏–∫": relation.get('–∏—Å—Ç–æ—á–Ω–∏–∫', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                            "–°—É–±—ä–µ–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤": duty.get('—Å—É–±—ä–µ–∫—Ç_–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                            "–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å": duty.get('–æ–ø–∏—Å–∞–Ω–∏–µ_–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            "–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–æ": right.get('–æ–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–∞–≤–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            "–°—É–±—ä–µ–∫—Ç –ø—Ä–∞–≤–∞": right.get('—Å—É–±—ä–µ–∫—Ç_–ø—Ä–∞–≤–∞', {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        })
                duties_df = pd.DataFrame(duties_data)
                st.dataframe(duties_df, use_container_width=True)
                all_duties_data.extend(duties_data)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª"):
            # –°–æ–∑–¥–∞–µ–º Pandas DataFrames
            rights_df = pd.DataFrame(all_rights_data)
            duties_df = pd.DataFrame(all_duties_data)
            goals_df = pd.DataFrame({"–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏": all_goals})
            objects_df = pd.DataFrame({"–ü—Ä–µ–¥–º–µ—Ç—ã": all_objects})
            subjects_df = pd.DataFrame({"–°—É–±—ä–µ–∫—Ç—ã": all_subjects})

            # –°–æ–∑–¥–∞–µ–º Excel writer
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                rights_df.to_excel(writer, sheet_name='–ü—Ä–∞–≤–∞', index=False)
                duties_df.to_excel(writer, sheet_name='–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', index=False)
                goals_df.to_excel(writer, sheet_name='–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏-—Ü–µ–ª–∏', index=False)
                objects_df.to_excel(writer, sheet_name='–ü—Ä–µ–¥–º–µ—Ç—ã (–æ–±—ä–µ–∫—Ç—ã)', index=False)
                subjects_df.to_excel(writer, sheet_name='–°—É–±—ä–µ–∫—Ç—ã', index=False)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            now = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"–∞–Ω–∞–ª–∏–∑_–ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π_{now}.xlsx"

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –≤ Excel",
                data=excel_buffer.getvalue(),
                file_name=filename,
                mime="application/vnd.ms-excel"
            )

    except json.JSONDecodeError as e:
        st.error(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
